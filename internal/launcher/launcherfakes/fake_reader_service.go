// Code generated by counterfeiter. DO NOT EDIT.
package launcherfakes

import (
	"context"
	"iter"
	"sync"

	"github.com/AntonKosov/git-backups/internal/github"
	"github.com/AntonKosov/git-backups/internal/launcher"
)

type FakeReaderService struct {
	AllReposStub        func(context.Context, string, string) iter.Seq2[github.Repo, error]
	allReposMutex       sync.RWMutex
	allReposArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	allReposReturns struct {
		result1 iter.Seq2[github.Repo, error]
	}
	allReposReturnsOnCall map[int]struct {
		result1 iter.Seq2[github.Repo, error]
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReaderService) AllRepos(arg1 context.Context, arg2 string, arg3 string) iter.Seq2[github.Repo, error] {
	fake.allReposMutex.Lock()
	ret, specificReturn := fake.allReposReturnsOnCall[len(fake.allReposArgsForCall)]
	fake.allReposArgsForCall = append(fake.allReposArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AllReposStub
	fakeReturns := fake.allReposReturns
	fake.recordInvocation("AllRepos", []interface{}{arg1, arg2, arg3})
	fake.allReposMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReaderService) AllReposCallCount() int {
	fake.allReposMutex.RLock()
	defer fake.allReposMutex.RUnlock()
	return len(fake.allReposArgsForCall)
}

func (fake *FakeReaderService) AllReposCalls(stub func(context.Context, string, string) iter.Seq2[github.Repo, error]) {
	fake.allReposMutex.Lock()
	defer fake.allReposMutex.Unlock()
	fake.AllReposStub = stub
}

func (fake *FakeReaderService) AllReposArgsForCall(i int) (context.Context, string, string) {
	fake.allReposMutex.RLock()
	defer fake.allReposMutex.RUnlock()
	argsForCall := fake.allReposArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReaderService) AllReposReturns(result1 iter.Seq2[github.Repo, error]) {
	fake.allReposMutex.Lock()
	defer fake.allReposMutex.Unlock()
	fake.AllReposStub = nil
	fake.allReposReturns = struct {
		result1 iter.Seq2[github.Repo, error]
	}{result1}
}

func (fake *FakeReaderService) AllReposReturnsOnCall(i int, result1 iter.Seq2[github.Repo, error]) {
	fake.allReposMutex.Lock()
	defer fake.allReposMutex.Unlock()
	fake.AllReposStub = nil
	if fake.allReposReturnsOnCall == nil {
		fake.allReposReturnsOnCall = make(map[int]struct {
			result1 iter.Seq2[github.Repo, error]
		})
	}
	fake.allReposReturnsOnCall[i] = struct {
		result1 iter.Seq2[github.Repo, error]
	}{result1}
}

func (fake *FakeReaderService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allReposMutex.RLock()
	defer fake.allReposMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReaderService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ launcher.ReaderService = new(FakeReaderService)
