// Code generated by counterfeiter. DO NOT EDIT.
package backupfakes

import (
	"context"
	"sync"

	"github.com/AntonKosov/git-backups/internal/git/backup"
)

type FakeGit struct {
	CloneStub        func(context.Context, string, string, *string) error
	cloneMutex       sync.RWMutex
	cloneArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *string
	}
	cloneReturns struct {
		result1 error
	}
	cloneReturnsOnCall map[int]struct {
		result1 error
	}
	FetchStub        func(context.Context, string, *string) error
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *string
	}
	fetchReturns struct {
		result1 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 error
	}
	GetRemoteURLStub        func(context.Context, string) (string, error)
	getRemoteURLMutex       sync.RWMutex
	getRemoteURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getRemoteURLReturns struct {
		result1 string
		result2 error
	}
	getRemoteURLReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SetRemoteURLStub        func(context.Context, string, string) error
	setRemoteURLMutex       sync.RWMutex
	setRemoteURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	setRemoteURLReturns struct {
		result1 error
	}
	setRemoteURLReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGit) Clone(arg1 context.Context, arg2 string, arg3 string, arg4 *string) error {
	fake.cloneMutex.Lock()
	ret, specificReturn := fake.cloneReturnsOnCall[len(fake.cloneArgsForCall)]
	fake.cloneArgsForCall = append(fake.cloneArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CloneStub
	fakeReturns := fake.cloneReturns
	fake.recordInvocation("Clone", []interface{}{arg1, arg2, arg3, arg4})
	fake.cloneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) CloneCallCount() int {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return len(fake.cloneArgsForCall)
}

func (fake *FakeGit) CloneCalls(stub func(context.Context, string, string, *string) error) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = stub
}

func (fake *FakeGit) CloneArgsForCall(i int) (context.Context, string, string, *string) {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	argsForCall := fake.cloneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGit) CloneReturns(result1 error) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = nil
	fake.cloneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CloneReturnsOnCall(i int, result1 error) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = nil
	if fake.cloneReturnsOnCall == nil {
		fake.cloneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cloneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) Fetch(arg1 context.Context, arg2 string, arg3 *string) error {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *string
	}{arg1, arg2, arg3})
	stub := fake.FetchStub
	fakeReturns := fake.fetchReturns
	fake.recordInvocation("Fetch", []interface{}{arg1, arg2, arg3})
	fake.fetchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeGit) FetchCalls(stub func(context.Context, string, *string) error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = stub
}

func (fake *FakeGit) FetchArgsForCall(i int) (context.Context, string, *string) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	argsForCall := fake.fetchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGit) FetchReturns(result1 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) FetchReturnsOnCall(i int, result1 error) {
	fake.fetchMutex.Lock()
	defer fake.fetchMutex.Unlock()
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) GetRemoteURL(arg1 context.Context, arg2 string) (string, error) {
	fake.getRemoteURLMutex.Lock()
	ret, specificReturn := fake.getRemoteURLReturnsOnCall[len(fake.getRemoteURLArgsForCall)]
	fake.getRemoteURLArgsForCall = append(fake.getRemoteURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetRemoteURLStub
	fakeReturns := fake.getRemoteURLReturns
	fake.recordInvocation("GetRemoteURL", []interface{}{arg1, arg2})
	fake.getRemoteURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGit) GetRemoteURLCallCount() int {
	fake.getRemoteURLMutex.RLock()
	defer fake.getRemoteURLMutex.RUnlock()
	return len(fake.getRemoteURLArgsForCall)
}

func (fake *FakeGit) GetRemoteURLCalls(stub func(context.Context, string) (string, error)) {
	fake.getRemoteURLMutex.Lock()
	defer fake.getRemoteURLMutex.Unlock()
	fake.GetRemoteURLStub = stub
}

func (fake *FakeGit) GetRemoteURLArgsForCall(i int) (context.Context, string) {
	fake.getRemoteURLMutex.RLock()
	defer fake.getRemoteURLMutex.RUnlock()
	argsForCall := fake.getRemoteURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGit) GetRemoteURLReturns(result1 string, result2 error) {
	fake.getRemoteURLMutex.Lock()
	defer fake.getRemoteURLMutex.Unlock()
	fake.GetRemoteURLStub = nil
	fake.getRemoteURLReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGit) GetRemoteURLReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRemoteURLMutex.Lock()
	defer fake.getRemoteURLMutex.Unlock()
	fake.GetRemoteURLStub = nil
	if fake.getRemoteURLReturnsOnCall == nil {
		fake.getRemoteURLReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRemoteURLReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGit) SetRemoteURL(arg1 context.Context, arg2 string, arg3 string) error {
	fake.setRemoteURLMutex.Lock()
	ret, specificReturn := fake.setRemoteURLReturnsOnCall[len(fake.setRemoteURLArgsForCall)]
	fake.setRemoteURLArgsForCall = append(fake.setRemoteURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.SetRemoteURLStub
	fakeReturns := fake.setRemoteURLReturns
	fake.recordInvocation("SetRemoteURL", []interface{}{arg1, arg2, arg3})
	fake.setRemoteURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) SetRemoteURLCallCount() int {
	fake.setRemoteURLMutex.RLock()
	defer fake.setRemoteURLMutex.RUnlock()
	return len(fake.setRemoteURLArgsForCall)
}

func (fake *FakeGit) SetRemoteURLCalls(stub func(context.Context, string, string) error) {
	fake.setRemoteURLMutex.Lock()
	defer fake.setRemoteURLMutex.Unlock()
	fake.SetRemoteURLStub = stub
}

func (fake *FakeGit) SetRemoteURLArgsForCall(i int) (context.Context, string, string) {
	fake.setRemoteURLMutex.RLock()
	defer fake.setRemoteURLMutex.RUnlock()
	argsForCall := fake.setRemoteURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGit) SetRemoteURLReturns(result1 error) {
	fake.setRemoteURLMutex.Lock()
	defer fake.setRemoteURLMutex.Unlock()
	fake.SetRemoteURLStub = nil
	fake.setRemoteURLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) SetRemoteURLReturnsOnCall(i int, result1 error) {
	fake.setRemoteURLMutex.Lock()
	defer fake.setRemoteURLMutex.Unlock()
	fake.SetRemoteURLStub = nil
	if fake.setRemoteURLReturnsOnCall == nil {
		fake.setRemoteURLReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRemoteURLReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.getRemoteURLMutex.RLock()
	defer fake.getRemoteURLMutex.RUnlock()
	fake.setRemoteURLMutex.RLock()
	defer fake.setRemoteURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backup.Git = new(FakeGit)
