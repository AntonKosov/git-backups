// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"github.com/AntonKosov/git-backups/internal"
)

type FakeTransformer struct {
	TransformStub        func(int) int
	transformMutex       sync.RWMutex
	transformArgsForCall []struct {
		arg1 int
	}
	transformReturns struct {
		result1 int
	}
	transformReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransformer) Transform(arg1 int) int {
	fake.transformMutex.Lock()
	ret, specificReturn := fake.transformReturnsOnCall[len(fake.transformArgsForCall)]
	fake.transformArgsForCall = append(fake.transformArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.TransformStub
	fakeReturns := fake.transformReturns
	fake.recordInvocation("Transform", []interface{}{arg1})
	fake.transformMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTransformer) TransformCallCount() int {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	return len(fake.transformArgsForCall)
}

func (fake *FakeTransformer) TransformCalls(stub func(int) int) {
	fake.transformMutex.Lock()
	defer fake.transformMutex.Unlock()
	fake.TransformStub = stub
}

func (fake *FakeTransformer) TransformArgsForCall(i int) int {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	argsForCall := fake.transformArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTransformer) TransformReturns(result1 int) {
	fake.transformMutex.Lock()
	defer fake.transformMutex.Unlock()
	fake.TransformStub = nil
	fake.transformReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeTransformer) TransformReturnsOnCall(i int, result1 int) {
	fake.transformMutex.Lock()
	defer fake.transformMutex.Unlock()
	fake.TransformStub = nil
	if fake.transformReturnsOnCall == nil {
		fake.transformReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.transformReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeTransformer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransformer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Transformer = new(FakeTransformer)
